{"ast":null,"code":"var _jsxFileName = \"/Users/yushaw/dev/context.isallyouneed.io/src/components/UrlInputBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './UrlInputBox.css';\nimport { Globe, ArrowRightCircle, Loader2 } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrlInputBox = ({\n  onUrlFetched\n}) => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFetchUrl = async () => {\n    if (url) {\n      setIsLoading(true);\n      let fetchedTextContent = '';\n      // Using a public CORS proxy for broader compatibility. \n      // WARNING: Public proxies have limitations, can be unreliable, and are not suitable for production.\n      // For production, a self-hosted CORS proxy or server-side fetching is recommended.\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`;\n      try {\n        const response = await fetch(proxyUrl);\n        if (!response.ok) {\n          // Try fetching directly if proxy fails or if it's a non-HTTP error from proxy itself\n          // This direct fetch will likely fail for many sites due to CORS\n          try {\n            console.warn(`Proxy fetch failed with status ${response.status}. Trying direct fetch for ${url}...`);\n            const directResponse = await fetch(url);\n            if (!directResponse.ok) {\n              throw new Error(`Direct fetch failed with status: ${directResponse.status}`);\n            }\n            fetchedTextContent = await directResponse.text();\n          } catch (directError) {\n            console.error(\"Direct fetch also failed:\", directError);\n            throw new Error(`Proxy status: ${response.status}, Direct fetch error: ${directError.message}`);\n          }\n        }\n        // If proxy response was ok, or direct fetch succeeded\n        if (!fetchedTextContent) {\n          // if not already set by direct fetch\n          fetchedTextContent = await response.text();\n        }\n\n        // Basic HTML to text conversion (very rudimentary)\n        // A proper library (like DOMPurify for security, then DOMParser) is better for real apps.\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = fetchedTextContent; // This could be risky if content isn't sanitized\n        let extractedText = tempDiv.textContent || tempDiv.innerText || \"\";\n\n        // Simple cleanup: reduce multiple newlines/spaces\n        extractedText = extractedText.replace(/\\s\\s+/g, ' ').replace(/\\n\\n+/g, '\\n').trim();\n        if (extractedText.length > 10000) {\n          // Limit context length\n          extractedText = extractedText.substring(0, 10000) + \"... [content truncated]\";\n        }\n        onUrlFetched(extractedText, url);\n      } catch (error) {\n        console.error(\"Failed to fetch URL:\", error);\n        onUrlFetched(`Error fetching content from ${url}: ${error.message}`, url);\n      }\n      setIsLoading(false);\n    } else {\n      alert(\"Please enter a URL.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bento-box url-input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-header\",\n      children: [/*#__PURE__*/_jsxDEV(Globe, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Website Scraper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"box-description\",\n      children: \"Enter a URL to fetch its content (uses a public CORS proxy).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"url-input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"url\",\n        value: url,\n        onChange: e => setUrl(e.target.value),\n        placeholder: \"https://example.com\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchUrl,\n        disabled: isLoading || !url,\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"icon-loading-animate\",\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(ArrowRightCircle, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 81\n        }, this), isLoading ? 'Fetching...' : 'Fetch']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(UrlInputBox, \"WhfbIzLw17Bzl2Z3eEA/D4r1wFs=\");\n_c = UrlInputBox;\nexport default UrlInputBox;\nvar _c;\n$RefreshReg$(_c, \"UrlInputBox\");","map":{"version":3,"names":["React","useState","Globe","ArrowRightCircle","Loader2","jsxDEV","_jsxDEV","UrlInputBox","onUrlFetched","_s","url","setUrl","isLoading","setIsLoading","handleFetchUrl","fetchedTextContent","proxyUrl","encodeURIComponent","response","fetch","ok","console","warn","status","directResponse","Error","text","directError","error","message","tempDiv","document","createElement","innerHTML","extractedText","textContent","innerText","replace","trim","length","substring","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","size","_c","$RefreshReg$"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/UrlInputBox.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './UrlInputBox.css';\nimport { Globe, ArrowRightCircle, Loader2 } from 'lucide-react';\n\nconst UrlInputBox = ({ onUrlFetched }) => {\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFetchUrl = async () => {\n    if (url) {\n      setIsLoading(true);\n      let fetchedTextContent = '';\n      // Using a public CORS proxy for broader compatibility. \n      // WARNING: Public proxies have limitations, can be unreliable, and are not suitable for production.\n      // For production, a self-hosted CORS proxy or server-side fetching is recommended.\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`;\n\n      try {\n        const response = await fetch(proxyUrl);\n        if (!response.ok) {\n          // Try fetching directly if proxy fails or if it's a non-HTTP error from proxy itself\n          // This direct fetch will likely fail for many sites due to CORS\n          try {\n            console.warn(`Proxy fetch failed with status ${response.status}. Trying direct fetch for ${url}...`);\n            const directResponse = await fetch(url);\n            if (!directResponse.ok) {\n                throw new Error(`Direct fetch failed with status: ${directResponse.status}`);\n            }\n            fetchedTextContent = await directResponse.text();\n          } catch (directError) {\n            console.error(\"Direct fetch also failed:\", directError);\n            throw new Error(`Proxy status: ${response.status}, Direct fetch error: ${directError.message}`);\n          }\n        }\n        // If proxy response was ok, or direct fetch succeeded\n        if (!fetchedTextContent) { // if not already set by direct fetch\n            fetchedTextContent = await response.text();\n        }\n\n        // Basic HTML to text conversion (very rudimentary)\n        // A proper library (like DOMPurify for security, then DOMParser) is better for real apps.\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = fetchedTextContent; // This could be risky if content isn't sanitized\n        let extractedText = tempDiv.textContent || tempDiv.innerText || \"\";\n        \n        // Simple cleanup: reduce multiple newlines/spaces\n        extractedText = extractedText.replace(/\\s\\s+/g, ' ').replace(/\\n\\n+/g, '\\n').trim();\n\n        if (extractedText.length > 10000) { // Limit context length\n          extractedText = extractedText.substring(0, 10000) + \"... [content truncated]\";\n        }\n        onUrlFetched(extractedText, url);\n      } catch (error) {\n        console.error(\"Failed to fetch URL:\", error);\n        onUrlFetched(`Error fetching content from ${url}: ${error.message}`, url);\n      }\n      setIsLoading(false);\n    } else {\n      alert(\"Please enter a URL.\");\n    }\n  };\n\n  return (\n    <div className=\"bento-box url-input-box\">\n      <div className=\"box-header\">\n        <Globe />\n        <h2>Website Scraper</h2>\n      </div>\n      <p className=\"box-description\">Enter a URL to fetch its content (uses a public CORS proxy).</p>\n      <div className=\"url-input-group\">\n        <input \n          type=\"url\" \n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"https://example.com\"\n          disabled={isLoading}\n        />\n        <button onClick={handleFetchUrl} disabled={isLoading || !url}>\n          {isLoading ? <Loader2 className=\"icon-loading-animate\" size={18} /> : <ArrowRightCircle size={18} />}\n          {isLoading ? 'Fetching...' : 'Fetch'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default UrlInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}