{"ast":null,"code":"import React,{useState}from'react';import'./UrlInputBox.css';import{Globe,ArrowRightCircle,Loader2}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UrlInputBox=_ref=>{let{onUrlFetched}=_ref;const[url,setUrl]=useState('');const[isLoading,setIsLoading]=useState(false);const handleFetchUrl=async()=>{if(url){setIsLoading(true);let fetchedTextContent='';// Using a public CORS proxy for broader compatibility. \n// WARNING: Public proxies have limitations, can be unreliable, and are not suitable for production.\n// For production, a self-hosted CORS proxy or server-side fetching is recommended.\nconst proxyUrl=\"https://api.allorigins.win/raw?url=\".concat(encodeURIComponent(url));try{const response=await fetch(proxyUrl);if(!response.ok){// Try fetching directly if proxy fails or if it's a non-HTTP error from proxy itself\n// This direct fetch will likely fail for many sites due to CORS\ntry{console.warn(\"Proxy fetch failed with status \".concat(response.status,\". Trying direct fetch for \").concat(url,\"...\"));const directResponse=await fetch(url);if(!directResponse.ok){throw new Error(\"Direct fetch failed with status: \".concat(directResponse.status));}fetchedTextContent=await directResponse.text();}catch(directError){console.error(\"Direct fetch also failed:\",directError);throw new Error(\"Proxy status: \".concat(response.status,\", Direct fetch error: \").concat(directError.message));}}// If proxy response was ok, or direct fetch succeeded\nif(!fetchedTextContent){// if not already set by direct fetch\nfetchedTextContent=await response.text();}// Basic HTML to text conversion (very rudimentary)\n// A proper library (like DOMPurify for security, then DOMParser) is better for real apps.\nconst tempDiv=document.createElement('div');tempDiv.innerHTML=fetchedTextContent;// This could be risky if content isn't sanitized\nlet extractedText=tempDiv.textContent||tempDiv.innerText||\"\";// Simple cleanup: reduce multiple newlines/spaces\nextractedText=extractedText.replace(/\\s\\s+/g,' ').replace(/\\n\\n+/g,'\\n').trim();if(extractedText.length>10000){// Limit context length\nextractedText=extractedText.substring(0,10000)+\"... [content truncated]\";}onUrlFetched(extractedText,url);}catch(error){console.error(\"Failed to fetch URL:\",error);onUrlFetched(\"Error fetching content from \".concat(url,\": \").concat(error.message),url);}setIsLoading(false);}else{alert(\"Please enter a URL.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"bento-box url-input-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"box-header\",children:[/*#__PURE__*/_jsx(Globe,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Website Scraper\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"box-description\",children:\"Enter a URL to fetch its content (uses a public CORS proxy).\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"url-input-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"url\",value:url,onChange:e=>setUrl(e.target.value),placeholder:\"https://example.com\",disabled:isLoading}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleFetchUrl,disabled:isLoading||!url,children:[isLoading?/*#__PURE__*/_jsx(Loader2,{className:\"icon-loading-animate\",size:18}):/*#__PURE__*/_jsx(ArrowRightCircle,{size:18}),isLoading?'Fetching...':'Fetch']})]})]});};export default UrlInputBox;","map":{"version":3,"names":["React","useState","Globe","ArrowRightCircle","Loader2","jsx","_jsx","jsxs","_jsxs","UrlInputBox","_ref","onUrlFetched","url","setUrl","isLoading","setIsLoading","handleFetchUrl","fetchedTextContent","proxyUrl","concat","encodeURIComponent","response","fetch","ok","console","warn","status","directResponse","Error","text","directError","error","message","tempDiv","document","createElement","innerHTML","extractedText","textContent","innerText","replace","trim","length","substring","alert","className","children","type","value","onChange","e","target","placeholder","disabled","onClick","size"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/UrlInputBox.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './UrlInputBox.css';\nimport { Globe, ArrowRightCircle, Loader2 } from 'lucide-react';\n\nconst UrlInputBox = ({ onUrlFetched }) => {\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFetchUrl = async () => {\n    if (url) {\n      setIsLoading(true);\n      let fetchedTextContent = '';\n      // Using a public CORS proxy for broader compatibility. \n      // WARNING: Public proxies have limitations, can be unreliable, and are not suitable for production.\n      // For production, a self-hosted CORS proxy or server-side fetching is recommended.\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`;\n\n      try {\n        const response = await fetch(proxyUrl);\n        if (!response.ok) {\n          // Try fetching directly if proxy fails or if it's a non-HTTP error from proxy itself\n          // This direct fetch will likely fail for many sites due to CORS\n          try {\n            console.warn(`Proxy fetch failed with status ${response.status}. Trying direct fetch for ${url}...`);\n            const directResponse = await fetch(url);\n            if (!directResponse.ok) {\n                throw new Error(`Direct fetch failed with status: ${directResponse.status}`);\n            }\n            fetchedTextContent = await directResponse.text();\n          } catch (directError) {\n            console.error(\"Direct fetch also failed:\", directError);\n            throw new Error(`Proxy status: ${response.status}, Direct fetch error: ${directError.message}`);\n          }\n        }\n        // If proxy response was ok, or direct fetch succeeded\n        if (!fetchedTextContent) { // if not already set by direct fetch\n            fetchedTextContent = await response.text();\n        }\n\n        // Basic HTML to text conversion (very rudimentary)\n        // A proper library (like DOMPurify for security, then DOMParser) is better for real apps.\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = fetchedTextContent; // This could be risky if content isn't sanitized\n        let extractedText = tempDiv.textContent || tempDiv.innerText || \"\";\n        \n        // Simple cleanup: reduce multiple newlines/spaces\n        extractedText = extractedText.replace(/\\s\\s+/g, ' ').replace(/\\n\\n+/g, '\\n').trim();\n\n        if (extractedText.length > 10000) { // Limit context length\n          extractedText = extractedText.substring(0, 10000) + \"... [content truncated]\";\n        }\n        onUrlFetched(extractedText, url);\n      } catch (error) {\n        console.error(\"Failed to fetch URL:\", error);\n        onUrlFetched(`Error fetching content from ${url}: ${error.message}`, url);\n      }\n      setIsLoading(false);\n    } else {\n      alert(\"Please enter a URL.\");\n    }\n  };\n\n  return (\n    <div className=\"bento-box url-input-box\">\n      <div className=\"box-header\">\n        <Globe />\n        <h2>Website Scraper</h2>\n      </div>\n      <p className=\"box-description\">Enter a URL to fetch its content (uses a public CORS proxy).</p>\n      <div className=\"url-input-group\">\n        <input \n          type=\"url\" \n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"https://example.com\"\n          disabled={isLoading}\n        />\n        <button onClick={handleFetchUrl} disabled={isLoading || !url}>\n          {isLoading ? <Loader2 className=\"icon-loading-animate\" size={18} /> : <ArrowRightCircle size={18} />}\n          {isLoading ? 'Fetching...' : 'Fetch'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default UrlInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}