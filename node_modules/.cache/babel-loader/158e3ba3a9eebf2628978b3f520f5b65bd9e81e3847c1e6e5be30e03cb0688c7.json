{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import'./App.css';import'./index.css';// Global styles\nimport Header from'./components/Header';import CodeInputBox from'./components/CodeInputBox';import UrlInputBox from'./components/UrlInputBox';import ContextOutputBox from'./components/ContextOutputBox';import SettingsBox from'./components/SettingsBox';import Footer from'./components/Footer';// Dynamically load Lucide icons\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const loadLucide=async()=>{if(window.lucide){window.lucide.createIcons();}else{try{const lucideModule=await import('lucide-react');if(lucideModule&&window.lucide){// Check if lucide added itself to window\nwindow.lucide.createIcons();}else{// Fallback or manual setup if direct import doesn't auto-initialize\n// This might be needed if 'lucide-static' isn't the right way to use it in React\n// Or if using 'lucide-react' components directly is preferred.\n// For now, assuming the script in index.html still works or we adjust.\nconsole.warn('Lucide script might not be loaded or initialized correctly for dynamic icons after initial page load.');}}catch(error){console.error(\"Failed to load lucide-react:\",error);}}};function App(){const[contextText,setContextText]=useState('');const[lastUrl,setLastUrl]=useState('');const[processedFiles,setProcessedFiles]=useState([]);// To keep track of files added\nuseEffect(()=>{const scriptId='lucide-script';let script=document.getElementById(scriptId);if(!script){script=document.createElement('script');script.id=scriptId;script.src=\"https://unpkg.com/lucide-static@latest/dist/lucide.min.js\";script.async=true;script.onload=()=>{if(window.lucide){window.lucide.createIcons();}};document.body.appendChild(script);}else if(window.lucide){window.lucide.createIcons();// If script already loaded, just run createIcons\n}// No cleanup needed for script if it's meant to persist across App mounts/unmounts\n// If App can unmount and remount, a more robust script management might be needed.\n},[]);// General effect to refresh icons when major state changes occur\nuseEffect(()=>{if(window.lucide){window.lucide.createIcons();}},[contextText,processedFiles,lastUrl]);// Add dependencies that might add new icons\nconst handleUrlFetched=useCallback((content,url)=>{setContextText(prevText=>prevText+content+'\\n\\n');setLastUrl(url);},[]);const handleFilesProcessed=useCallback((filesContent,newFiles)=>{// This is a placeholder. Actual file content processing will be more complex.\n// For now, just appending a note about the files.\nconst fileNotes=newFiles.map(f=>\"Processed file: \".concat(f.name)).join('\\n');setContextText(prevText=>prevText+fileNotes+'\\n\\n');setProcessedFiles(prevFiles=>[...prevFiles,...newFiles.map(f=>f.name)]);},[]);const handleClearContext=useCallback(()=>{setContextText('');setLastUrl('');setProcessedFiles([]);// Potentially reset CodeInputBox files state too, if it doesn't clear itself.\n// This would require passing a reset trigger or managing its files state in App.js\n},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"main\",{className:\"bento-grid\",children:[/*#__PURE__*/_jsx(CodeInputBox,{onFilesProcessed:handleFilesProcessed}),/*#__PURE__*/_jsx(UrlInputBox,{onUrlFetched:handleUrlFetched}),/*#__PURE__*/_jsx(ContextOutputBox,{contextText:contextText,onClearContext:handleClearContext}),/*#__PURE__*/_jsx(SettingsBox,{})]}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","CodeInputBox","UrlInputBox","ContextOutputBox","SettingsBox","Footer","jsx","_jsx","jsxs","_jsxs","loadLucide","window","lucide","createIcons","lucideModule","console","warn","error","App","contextText","setContextText","lastUrl","setLastUrl","processedFiles","setProcessedFiles","scriptId","script","document","getElementById","createElement","id","src","async","onload","body","appendChild","handleUrlFetched","content","url","prevText","handleFilesProcessed","filesContent","newFiles","fileNotes","map","f","concat","name","join","prevFiles","handleClearContext","className","children","onFilesProcessed","onUrlFetched","onClearContext"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport './index.css'; // Global styles\nimport Header from './components/Header';\nimport CodeInputBox from './components/CodeInputBox';\nimport UrlInputBox from './components/UrlInputBox';\nimport ContextOutputBox from './components/ContextOutputBox';\nimport SettingsBox from './components/SettingsBox';\nimport Footer from './components/Footer';\n\n// Dynamically load Lucide icons\nconst loadLucide = async () => {\n  if (window.lucide) {\n    window.lucide.createIcons();\n  } else {\n    try {\n      const lucideModule = await import('lucide-react');\n      if (lucideModule && window.lucide) { // Check if lucide added itself to window\n          window.lucide.createIcons();\n      } else {\n          // Fallback or manual setup if direct import doesn't auto-initialize\n          // This might be needed if 'lucide-static' isn't the right way to use it in React\n          // Or if using 'lucide-react' components directly is preferred.\n          // For now, assuming the script in index.html still works or we adjust.\n          console.warn('Lucide script might not be loaded or initialized correctly for dynamic icons after initial page load.');\n      }\n    } catch (error) {\n      console.error(\"Failed to load lucide-react:\", error);\n    }\n  }\n};\n\nfunction App() {\n  const [contextText, setContextText] = useState('');\n  const [lastUrl, setLastUrl] = useState('');\n  const [processedFiles, setProcessedFiles] = useState([]); // To keep track of files added\n\n  useEffect(() => {\n    const scriptId = 'lucide-script';\n    let script = document.getElementById(scriptId);\n    if (!script) {\n        script = document.createElement('script');\n        script.id = scriptId;\n        script.src = \"https://unpkg.com/lucide-static@latest/dist/lucide.min.js\";\n        script.async = true;\n        script.onload = () => {\n          if (window.lucide) {\n            window.lucide.createIcons();\n          }\n        };\n        document.body.appendChild(script);\n    } else if (window.lucide) {\n        window.lucide.createIcons(); // If script already loaded, just run createIcons\n    }\n\n    // No cleanup needed for script if it's meant to persist across App mounts/unmounts\n    // If App can unmount and remount, a more robust script management might be needed.\n  }, []);\n\n  // General effect to refresh icons when major state changes occur\n  useEffect(() => {\n    if (window.lucide) {\n      window.lucide.createIcons();\n    }\n  }, [contextText, processedFiles, lastUrl]); // Add dependencies that might add new icons\n\n  const handleUrlFetched = useCallback((content, url) => {\n    setContextText(prevText => prevText + content + '\\n\\n');\n    setLastUrl(url);\n  }, []);\n\n  const handleFilesProcessed = useCallback((filesContent, newFiles) => {\n    // This is a placeholder. Actual file content processing will be more complex.\n    // For now, just appending a note about the files.\n    const fileNotes = newFiles.map(f => `Processed file: ${f.name}`).join('\\n');\n    setContextText(prevText => prevText + fileNotes + '\\n\\n');\n    setProcessedFiles(prevFiles => [...prevFiles, ...newFiles.map(f => f.name)]);\n  }, []);\n\n  const handleClearContext = useCallback(() => {\n    setContextText('');\n    setLastUrl('');\n    setProcessedFiles([]);\n    // Potentially reset CodeInputBox files state too, if it doesn't clear itself.\n    // This would require passing a reset trigger or managing its files state in App.js\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <main className=\"bento-grid\">\n        <CodeInputBox onFilesProcessed={handleFilesProcessed} />\n        <UrlInputBox onUrlFetched={handleUrlFetched} />\n        <ContextOutputBox contextText={contextText} onClearContext={handleClearContext} />\n        <SettingsBox />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAC/D,MAAO,WAAW,CAClB,MAAO,aAAa,CAAE;AACtB,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,gBAAgB,KAAM,+BAA+B,CAC5D,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CAExC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAIC,MAAM,CAACC,MAAM,CAAE,CACjBD,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAC7B,CAAC,IAAM,CACL,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,OAAM,CAAC,cAAc,CAAC,CACjD,GAAIA,YAAY,EAAIH,MAAM,CAACC,MAAM,CAAE,CAAE;AACjCD,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAC/B,CAAC,IAAM,CACH;AACA;AACA;AACA;AACAE,OAAO,CAACC,IAAI,CAAC,uGAAuG,CAAC,CACzH,CACF,CAAE,MAAOC,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CACF,CAAC,CAED,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACwB,OAAO,CAAEC,UAAU,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAAC0B,cAAc,CAAEC,iBAAiB,CAAC,CAAG3B,QAAQ,CAAC,EAAE,CAAC,CAAE;AAE1DC,SAAS,CAAC,IAAM,CACd,KAAM,CAAA2B,QAAQ,CAAG,eAAe,CAChC,GAAI,CAAAC,MAAM,CAAGC,QAAQ,CAACC,cAAc,CAACH,QAAQ,CAAC,CAC9C,GAAI,CAACC,MAAM,CAAE,CACTA,MAAM,CAAGC,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC,CACzCH,MAAM,CAACI,EAAE,CAAGL,QAAQ,CACpBC,MAAM,CAACK,GAAG,CAAG,2DAA2D,CACxEL,MAAM,CAACM,KAAK,CAAG,IAAI,CACnBN,MAAM,CAACO,MAAM,CAAG,IAAM,CACpB,GAAItB,MAAM,CAACC,MAAM,CAAE,CACjBD,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAC7B,CACF,CAAC,CACDc,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC,CACrC,CAAC,IAAM,IAAIf,MAAM,CAACC,MAAM,CAAE,CACtBD,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAE;AACjC,CAEA;AACA;AACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACAf,SAAS,CAAC,IAAM,CACd,GAAIa,MAAM,CAACC,MAAM,CAAE,CACjBD,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAC7B,CACF,CAAC,CAAE,CAACM,WAAW,CAAEI,cAAc,CAAEF,OAAO,CAAC,CAAC,CAAE;AAE5C,KAAM,CAAAe,gBAAgB,CAAGrC,WAAW,CAAC,CAACsC,OAAO,CAAEC,GAAG,GAAK,CACrDlB,cAAc,CAACmB,QAAQ,EAAIA,QAAQ,CAAGF,OAAO,CAAG,MAAM,CAAC,CACvDf,UAAU,CAACgB,GAAG,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,oBAAoB,CAAGzC,WAAW,CAAC,CAAC0C,YAAY,CAAEC,QAAQ,GAAK,CACnE;AACA;AACA,KAAM,CAAAC,SAAS,CAAGD,QAAQ,CAACE,GAAG,CAACC,CAAC,qBAAAC,MAAA,CAAuBD,CAAC,CAACE,IAAI,CAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAC3E5B,cAAc,CAACmB,QAAQ,EAAIA,QAAQ,CAAGI,SAAS,CAAG,MAAM,CAAC,CACzDnB,iBAAiB,CAACyB,SAAS,EAAI,CAAC,GAAGA,SAAS,CAAE,GAAGP,QAAQ,CAACE,GAAG,CAACC,CAAC,EAAIA,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAC9E,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,kBAAkB,CAAGnD,WAAW,CAAC,IAAM,CAC3CqB,cAAc,CAAC,EAAE,CAAC,CAClBE,UAAU,CAAC,EAAE,CAAC,CACdE,iBAAiB,CAAC,EAAE,CAAC,CACrB;AACA;AACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEf,KAAA,QAAK0C,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB7C,IAAA,CAACP,MAAM,GAAE,CAAC,cACVS,KAAA,SAAM0C,SAAS,CAAC,YAAY,CAAAC,QAAA,eAC1B7C,IAAA,CAACN,YAAY,EAACoD,gBAAgB,CAAEb,oBAAqB,CAAE,CAAC,cACxDjC,IAAA,CAACL,WAAW,EAACoD,YAAY,CAAElB,gBAAiB,CAAE,CAAC,cAC/C7B,IAAA,CAACJ,gBAAgB,EAACgB,WAAW,CAAEA,WAAY,CAACoC,cAAc,CAAEL,kBAAmB,CAAE,CAAC,cAClF3C,IAAA,CAACH,WAAW,GAAE,CAAC,EACX,CAAC,cACPG,IAAA,CAACF,MAAM,GAAE,CAAC,EACP,CAAC,CAEV,CAEA,cAAe,CAAAa,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}