{"ast":null,"code":"var _jsxFileName = \"/Users/yushaw/dev/context.isallyouneed.io/src/components/CodeInputBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport './CodeInputBox.css';\nimport { FileCode2, UploadCloud, FilePlus } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeInputBox = ({\n  onFilesProcessed\n}) => {\n  _s();\n  const [selectedFilesDisplay, setSelectedFilesDisplay] = useState([]); // For display only\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  // This key will be changed by App.js to reset this component\n  // We use it to clear selectedFilesDisplay when context is cleared in App\n\n  const actualFilesToProcess = []; // Keep a temporary list of files to send for processing\n\n  const handleFileChange = event => {\n    processAndDisplayFiles(event.target.files);\n  };\n  const processAndDisplayFiles = useCallback(fileList => {\n    if (fileList.length === 0) return;\n    const newDisplayFiles = [];\n    const filePromises = [];\n    for (const file of fileList) {\n      newDisplayFiles.push({\n        name: file.name,\n        size: file.size,\n        type: file.type\n      });\n      const promise = new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          resolve({\n            name: file.name,\n            content: e.target.result,\n            size: file.size,\n            type: file.type\n          });\n        };\n        reader.onerror = e => {\n          console.error(\"Error reading file:\", file.name, e);\n          resolve({\n            name: file.name,\n            content: `Error reading file: ${file.name}`,\n            size: file.size,\n            type: file.type\n          }); // Resolve with error message\n        };\n        // For now, only read as text. ZIP/binary would need different handling.\n        if (file.type.startsWith('text/') || file.name.endsWith('.txt') || file.name.endsWith('.md') || file.name.endsWith('.json') || file.name.endsWith('.js') || file.name.endsWith('.css') || file.name.endsWith('.html') || file.name.endsWith('.xml') || file.name.endsWith('.py') || file.name.endsWith('.java') || file.name.endsWith('.c') || file.name.endsWith('.cpp') || file.name.endsWith('.h') || file.name.endsWith('.cs') || file.name.endsWith('.go') || file.name.endsWith('.rb') || file.name.endsWith('.php') || file.name.endsWith('.ts') || file.name.endsWith('.tsx') || file.name.endsWith('.jsx')) {\n          reader.readAsText(file);\n        } else if (file.name.endsWith('.zip')) {\n          // Placeholder for ZIP processing\n          console.log(`File ${file.name} is a ZIP file. Placeholder for processing.`);\n          resolve({\n            name: file.name,\n            content: `[ZIP File: ${file.name} - content processing not yet implemented]`,\n            size: file.size,\n            type: file.type\n          });\n        } else {\n          // For other non-text files, just note their presence\n          console.log(`File ${file.name} is not a recognized text type. Adding as reference.`);\n          resolve({\n            name: file.name,\n            content: `[Binary or unrecognized file: ${file.name}]`,\n            size: file.size,\n            type: file.type\n          });\n        }\n      });\n      filePromises.push(promise);\n    }\n    Promise.all(filePromises).then(filesWithContent => {\n      onFilesProcessed(filesWithContent);\n    });\n    setSelectedFilesDisplay(prevFiles => [...prevFiles, ...newDisplayFiles]);\n  }, [onFilesProcessed]);\n  const handleDrop = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n    processAndDisplayFiles(event.dataTransfer.files);\n  }, [processAndDisplayFiles]);\n  const handleDragOver = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n  const handleDragLeave = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  // Remove lucide.createIcons effect\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bento-box code-input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-header\",\n      children: [/*#__PURE__*/_jsxDEV(FileCode2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Code Processor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"box-description\",\n      children: \"Upload code files, folders, or a ZIP archive.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `file-drop-area ${isDragOver ? 'dragover' : ''}`,\n      onDrop: handleDrop,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      children: [/*#__PURE__*/_jsxDEV(UploadCloud, {\n        size: 48,\n        className: \"upload-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag & drop files here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"or-text\",\n        children: \"or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload-input\",\n        className: \"custom-file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(FilePlus, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), \" Choose Files\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload-input\",\n        multiple: true,\n        webkitdirectory: \"true\" // For folder uploads (works in Chrome/Edge)\n        ,\n        directory: \"true\" // Standard attribute for folder uploads\n        ,\n        style: {\n          display: 'none'\n        },\n        onChange: handleFileChange\n        // Consider resetting input value to allow re-upload of same file(s)\n        ,\n        onClick: event => {\n          event.target.value = null;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), selectedFilesDisplay.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Selected Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedFilesDisplay.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, \" (\", (file.size / 1024).toFixed(2), \" KB)\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeInputBox, \"VYKK29VIEl2X4BkkNhRJhkxXucU=\");\n_c = CodeInputBox;\nexport default CodeInputBox;\nvar _c;\n$RefreshReg$(_c, \"CodeInputBox\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","FileCode2","UploadCloud","FilePlus","jsxDEV","_jsxDEV","CodeInputBox","onFilesProcessed","_s","selectedFilesDisplay","setSelectedFilesDisplay","isDragOver","setIsDragOver","actualFilesToProcess","handleFileChange","event","processAndDisplayFiles","target","files","fileList","length","newDisplayFiles","filePromises","file","push","name","size","type","promise","Promise","resolve","reject","reader","FileReader","onload","e","content","result","onerror","console","error","startsWith","endsWith","readAsText","log","all","then","filesWithContent","prevFiles","handleDrop","preventDefault","stopPropagation","dataTransfer","handleDragOver","handleDragLeave","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDrop","onDragOver","onDragLeave","htmlFor","id","multiple","webkitdirectory","directory","style","display","onChange","onClick","value","map","index","toFixed","_c","$RefreshReg$"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/CodeInputBox.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport './CodeInputBox.css';\nimport { FileCode2, UploadCloud, FilePlus } from 'lucide-react';\n\nconst CodeInputBox = ({ onFilesProcessed }) => {\n  const [selectedFilesDisplay, setSelectedFilesDisplay] = useState([]); // For display only\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  // This key will be changed by App.js to reset this component\n  // We use it to clear selectedFilesDisplay when context is cleared in App\n\n  const actualFilesToProcess = []; // Keep a temporary list of files to send for processing\n\n  const handleFileChange = (event) => {\n    processAndDisplayFiles(event.target.files);\n  };\n\n  const processAndDisplayFiles = useCallback((fileList) => {\n    if (fileList.length === 0) return;\n\n    const newDisplayFiles = [];\n    const filePromises = [];\n\n    for (const file of fileList) {\n      newDisplayFiles.push({\n        name: file.name,\n        size: file.size,\n        type: file.type\n      });\n      \n      const promise = new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          resolve({ \n            name: file.name, \n            content: e.target.result, \n            size: file.size,\n            type: file.type \n          });\n        };\n        reader.onerror = (e) => {\n          console.error(\"Error reading file:\", file.name, e);\n          resolve({ \n            name: file.name, \n            content: `Error reading file: ${file.name}`, \n            size: file.size,\n            type: file.type\n          }); // Resolve with error message\n        };\n        // For now, only read as text. ZIP/binary would need different handling.\n        if (file.type.startsWith('text/') || file.name.endsWith('.txt') || file.name.endsWith('.md') || file.name.endsWith('.json') || file.name.endsWith('.js') || file.name.endsWith('.css') || file.name.endsWith('.html') || file.name.endsWith('.xml') || file.name.endsWith('.py') || file.name.endsWith('.java') || file.name.endsWith('.c') || file.name.endsWith('.cpp') || file.name.endsWith('.h') || file.name.endsWith('.cs') || file.name.endsWith('.go') || file.name.endsWith('.rb') || file.name.endsWith('.php') || file.name.endsWith('.ts') || file.name.endsWith('.tsx') || file.name.endsWith('.jsx')) {\n          reader.readAsText(file);\n        } else if (file.name.endsWith('.zip')) {\n            // Placeholder for ZIP processing\n            console.log(`File ${file.name} is a ZIP file. Placeholder for processing.`);\n            resolve({ name: file.name, content: `[ZIP File: ${file.name} - content processing not yet implemented]`, size: file.size, type: file.type });\n        } else {\n          // For other non-text files, just note their presence\n          console.log(`File ${file.name} is not a recognized text type. Adding as reference.`);\n          resolve({ name: file.name, content: `[Binary or unrecognized file: ${file.name}]`, size: file.size, type: file.type });\n        }\n      });\n      filePromises.push(promise);\n    }\n\n    Promise.all(filePromises).then(filesWithContent => {\n      onFilesProcessed(filesWithContent);\n    });\n\n    setSelectedFilesDisplay(prevFiles => [...prevFiles, ...newDisplayFiles]);\n\n  }, [onFilesProcessed]);\n\n  const handleDrop = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n    processAndDisplayFiles(event.dataTransfer.files);\n  }, [processAndDisplayFiles]);\n\n  const handleDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  // Remove lucide.createIcons effect\n\n  return (\n    <div className=\"bento-box code-input-box\">\n      <div className=\"box-header\">\n        <FileCode2 />\n        <h2>Code Processor</h2>\n      </div>\n      <p className=\"box-description\">Upload code files, folders, or a ZIP archive.</p>\n      <div \n        className={`file-drop-area ${isDragOver ? 'dragover' : ''}`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <UploadCloud size={48} className=\"upload-icon\" />\n        <p>Drag & drop files here</p>\n        <p className=\"or-text\">or</p>\n        <label htmlFor=\"file-upload-input\" className=\"custom-file-upload\">\n          <FilePlus size={18} /> Choose Files\n        </label>\n        <input \n          type=\"file\" \n          id=\"file-upload-input\" \n          multiple \n          webkitdirectory=\"true\" // For folder uploads (works in Chrome/Edge)\n          directory=\"true\"       // Standard attribute for folder uploads\n          style={{ display: 'none' }} \n          onChange={handleFileChange}\n          // Consider resetting input value to allow re-upload of same file(s)\n          onClick={(event)=> { event.target.value = null }}\n        />\n      </div>\n      {selectedFilesDisplay.length > 0 && (\n        <div className=\"file-list-preview\">\n          <h4>Selected Files:</h4>\n          <ul>\n            {selectedFilesDisplay.map((file, index) => (\n              <li key={index}>\n                {file.name} ({(file.size / 1024).toFixed(2)} KB)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}