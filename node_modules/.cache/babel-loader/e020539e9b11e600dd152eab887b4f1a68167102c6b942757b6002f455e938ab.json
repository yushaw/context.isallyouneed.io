{"ast":null,"code":"var _jsxFileName = \"/Users/yushaw/dev/context.isallyouneed.io/src/components/CodeInputBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport './CodeInputBox.css';\nimport { FileCode2, UploadCloud, FilePlus } from 'lucide-react';\nimport JSZip from 'jszip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeInputBox = ({\n  onFilesProcessed,\n  key: resetKey\n}) => {\n  _s();\n  const [selectedFilesDisplay, setSelectedFilesDisplay] = useState([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  // Effect to clear files when resetKey changes (i.e., context is cleared in App)\n  React.useEffect(() => {\n    setSelectedFilesDisplay([]);\n  }, [resetKey]);\n  const readFileAsText = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => resolve({\n        name: file.name,\n        content: e.target.result,\n        size: file.size,\n        type: file.type\n      });\n      reader.onerror = e => {\n        console.error(\"Error reading file:\", file.name, e);\n        resolve({\n          name: file.name,\n          content: `Error reading file: ${file.name}`,\n          size: file.size,\n          type: file.type\n        });\n      };\n      reader.readAsText(file);\n    });\n  };\n  const isTextFile = (fileName, fileType) => {\n    var _fileName$split$pop;\n    const textExtensions = ['txt', 'md', 'json', 'js', 'jsx', 'ts', 'tsx', 'css', 'html', 'xml', 'py', 'java', 'c', 'cpp', 'h', 'cs', 'go', 'rb', 'php', 'sh', 'yaml', 'yml', 'ini', 'cfg', 'log', 'sql', 'r', 'swift', 'kt', 'kts', 'gradle', 'conf', 'bat', 'ps1', 'pl', 'feature', 'rst', 'tex', 'bib', 'diff', 'patch', 'csv', 'tsv', 'env', 'lock', 'toml', 'sum'];\n    const extension = (_fileName$split$pop = fileName.split('.').pop()) === null || _fileName$split$pop === void 0 ? void 0 : _fileName$split$pop.toLowerCase();\n    return fileType && fileType.startsWith('text/') || extension && textExtensions.includes(extension);\n  };\n  const processAndDisplayFiles = useCallback(async fileList => {\n    if (fileList.length === 0) return;\n    let newDisplayFiles = [];\n    let filesToProcessPromises = [];\n    for (const file of fileList) {\n      newDisplayFiles.push({\n        name: file.name,\n        size: file.size,\n        type: file.type\n      });\n      if (file.name.endsWith('.zip')) {\n        const zip = new JSZip();\n        try {\n          const content = await zip.loadAsync(file);\n          const zipFilePromises = [];\n          content.forEach((relativePath, zipEntry) => {\n            if (!zipEntry.dir && isTextFile(zipEntry.name, null /* zip entries don't have a direct type */)) {\n              zipFilePromises.push(zipEntry.async('string').then(textContent => ({\n                name: zipEntry.name,\n                content: textContent,\n                size: textContent.length,\n                // Approximate size, actual uncompressed size is harder to get reliably here\n                type: 'text/plain' // Assume text for now\n              })).catch(err => {\n                console.error(\"Error reading file from zip:\", zipEntry.name, err);\n                return {\n                  name: zipEntry.name,\n                  content: `Error reading file from zip: ${zipEntry.name}`,\n                  size: 0,\n                  type: 'error'\n                };\n              }));\n            }\n          });\n          // filesToProcessPromises = [...filesToProcessPromises, ...zipFilePromises]; // This was wrong, it needs to await all these promises\n          const processedZipFiles = await Promise.all(zipFilePromises);\n          filesToProcessPromises.push(...processedZipFiles.map(f => Promise.resolve(f))); // re-wrap as promises if needed or just add\n        } catch (error) {\n          console.error(\"Error processing ZIP file:\", file.name, error);\n          filesToProcessPromises.push(Promise.resolve({\n            name: file.name,\n            content: `Error processing ZIP: ${error.message}`,\n            size: file.size,\n            type: file.type\n          }));\n        }\n      } else if (isTextFile(file.name, file.type)) {\n        filesToProcessPromises.push(readFileAsText(file));\n      } else {\n        console.log(`File ${file.name} is not a recognized text type or ZIP. Adding as reference.`);\n        filesToProcessPromises.push(Promise.resolve({\n          name: file.name,\n          content: `[Skipped non-text/non-zip file: ${file.name}]`,\n          size: file.size,\n          type: file.type\n        }));\n      }\n    }\n    Promise.all(filesToProcessPromises).then(filesWithContent => {\n      // Filter out any null/undefined results if errors weren't handled to return objects\n      onFilesProcessed(filesWithContent.filter(f => f));\n    });\n    setSelectedFilesDisplay(prevFiles => [...prevFiles, ...newDisplayFiles]);\n  }, [onFilesProcessed]);\n  const handleFileChange = event => {\n    processAndDisplayFiles(event.target.files);\n  };\n  const handleDrop = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n    processAndDisplayFiles(event.dataTransfer.files);\n  }, [processAndDisplayFiles]);\n  const handleDragOver = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n  const handleDragLeave = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bento-box code-input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-header\",\n      children: [/*#__PURE__*/_jsxDEV(FileCode2, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Code Processor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"box-description\",\n      children: \"Upload code files, folders, or a ZIP archive. Text-based files within folders/ZIPs will be extracted.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `file-drop-area ${isDragOver ? 'dragover' : ''}`,\n      onDrop: handleDrop,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      children: [/*#__PURE__*/_jsxDEV(UploadCloud, {\n        size: 48,\n        className: \"upload-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag & drop files here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"or-text\",\n        children: \"or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload-input\",\n        className: \"custom-file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(FilePlus, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), \" Choose Files or Folders\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload-input\",\n        multiple: true,\n        webkitdirectory: \"true\",\n        directory: \"true\",\n        style: {\n          display: 'none'\n        },\n        onChange: handleFileChange,\n        onClick: event => {\n          event.target.value = null;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), selectedFilesDisplay.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-list-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Selected Files/Folders:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedFilesDisplay.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, \" (\", (file.size / 1024).toFixed(2), \" KB)\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeInputBox, \"hr1V9O9NaW3SXohZRuOqI8JazH4=\");\n_c = CodeInputBox;\nexport default CodeInputBox;\nvar _c;\n$RefreshReg$(_c, \"CodeInputBox\");","map":{"version":3,"names":["React","useState","useCallback","FileCode2","UploadCloud","FilePlus","JSZip","jsxDEV","_jsxDEV","CodeInputBox","onFilesProcessed","key","resetKey","_s","selectedFilesDisplay","setSelectedFilesDisplay","isDragOver","setIsDragOver","useEffect","readFileAsText","file","Promise","resolve","reject","reader","FileReader","onload","e","name","content","target","result","size","type","onerror","console","error","readAsText","isTextFile","fileName","fileType","_fileName$split$pop","textExtensions","extension","split","pop","toLowerCase","startsWith","includes","processAndDisplayFiles","fileList","length","newDisplayFiles","filesToProcessPromises","push","endsWith","zip","loadAsync","zipFilePromises","forEach","relativePath","zipEntry","dir","async","then","textContent","catch","err","processedZipFiles","all","map","f","message","log","filesWithContent","filter","prevFiles","handleFileChange","event","files","handleDrop","preventDefault","stopPropagation","dataTransfer","handleDragOver","handleDragLeave","className","children","_jsxFileName","lineNumber","columnNumber","onDrop","onDragOver","onDragLeave","htmlFor","id","multiple","webkitdirectory","directory","style","display","onChange","onClick","value","index","toFixed","_c","$RefreshReg$"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/CodeInputBox.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './CodeInputBox.css';\nimport { FileCode2, UploadCloud, FilePlus } from 'lucide-react';\nimport JSZip from 'jszip';\n\nconst CodeInputBox = ({ onFilesProcessed, key: resetKey }) => {\n  const [selectedFilesDisplay, setSelectedFilesDisplay] = useState([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  // Effect to clear files when resetKey changes (i.e., context is cleared in App)\n  React.useEffect(() => {\n    setSelectedFilesDisplay([]);\n  }, [resetKey]);\n\n  const readFileAsText = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve({ name: file.name, content: e.target.result, size: file.size, type: file.type });\n      reader.onerror = (e) => {\n        console.error(\"Error reading file:\", file.name, e);\n        resolve({ name: file.name, content: `Error reading file: ${file.name}`, size: file.size, type: file.type });\n      };\n      reader.readAsText(file);\n    });\n  };\n\n  const isTextFile = (fileName, fileType) => {\n    const textExtensions = ['txt', 'md', 'json', 'js', 'jsx', 'ts', 'tsx', 'css', 'html', 'xml', 'py', 'java', 'c', 'cpp', 'h', 'cs', 'go', 'rb', 'php', 'sh', 'yaml', 'yml', 'ini', 'cfg', 'log', 'sql', 'r', 'swift', 'kt', 'kts', 'gradle', 'conf', 'bat', 'ps1', 'pl', 'feature', 'rst', 'tex', 'bib', 'diff', 'patch', 'csv', 'tsv', 'env', 'lock', 'toml', 'sum'];\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return (fileType && fileType.startsWith('text/')) || (extension && textExtensions.includes(extension));\n  };\n\n  const processAndDisplayFiles = useCallback(async (fileList) => {\n    if (fileList.length === 0) return;\n\n    let newDisplayFiles = [];\n    let filesToProcessPromises = [];\n\n    for (const file of fileList) {\n      newDisplayFiles.push({ name: file.name, size: file.size, type: file.type });\n\n      if (file.name.endsWith('.zip')) {\n        const zip = new JSZip();\n        try {\n          const content = await zip.loadAsync(file);\n          const zipFilePromises = [];\n          content.forEach((relativePath, zipEntry) => {\n            if (!zipEntry.dir && isTextFile(zipEntry.name, null /* zip entries don't have a direct type */)) {\n              zipFilePromises.push(\n                zipEntry.async('string').then(textContent => ({\n                  name: zipEntry.name,\n                  content: textContent,\n                  size: textContent.length, // Approximate size, actual uncompressed size is harder to get reliably here\n                  type: 'text/plain' // Assume text for now\n                }))\n                .catch(err => {\n                    console.error(\"Error reading file from zip:\", zipEntry.name, err);\n                    return { name: zipEntry.name, content: `Error reading file from zip: ${zipEntry.name}`, size: 0, type: 'error' };\n                })\n              );\n            }\n          });\n          // filesToProcessPromises = [...filesToProcessPromises, ...zipFilePromises]; // This was wrong, it needs to await all these promises\n          const processedZipFiles = await Promise.all(zipFilePromises);\n          filesToProcessPromises.push(...processedZipFiles.map(f => Promise.resolve(f))); // re-wrap as promises if needed or just add\n\n        } catch (error) {\n          console.error(\"Error processing ZIP file:\", file.name, error);\n          filesToProcessPromises.push(Promise.resolve({ name: file.name, content: `Error processing ZIP: ${error.message}`, size: file.size, type: file.type }));\n        }\n      } else if (isTextFile(file.name, file.type)) {\n        filesToProcessPromises.push(readFileAsText(file));\n      } else {\n        console.log(`File ${file.name} is not a recognized text type or ZIP. Adding as reference.`);\n        filesToProcessPromises.push(Promise.resolve({ name: file.name, content: `[Skipped non-text/non-zip file: ${file.name}]`, size: file.size, type: file.type }));\n      }\n    }\n    \n    Promise.all(filesToProcessPromises).then(filesWithContent => {\n        // Filter out any null/undefined results if errors weren't handled to return objects\n        onFilesProcessed(filesWithContent.filter(f => f)); \n    });\n\n    setSelectedFilesDisplay(prevFiles => [...prevFiles, ...newDisplayFiles]);\n\n  }, [onFilesProcessed]);\n\n  const handleFileChange = (event) => {\n    processAndDisplayFiles(event.target.files);\n  };\n\n  const handleDrop = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n    processAndDisplayFiles(event.dataTransfer.files);\n  }, [processAndDisplayFiles]);\n\n  const handleDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  return (\n    <div className=\"bento-box code-input-box\">\n      <div className=\"box-header\">\n        <FileCode2 />\n        <h2>Code Processor</h2>\n      </div>\n      <p className=\"box-description\">Upload code files, folders, or a ZIP archive. Text-based files within folders/ZIPs will be extracted.</p>\n      <div \n        className={`file-drop-area ${isDragOver ? 'dragover' : ''}`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <UploadCloud size={48} className=\"upload-icon\" />\n        <p>Drag & drop files here</p>\n        <p className=\"or-text\">or</p>\n        <label htmlFor=\"file-upload-input\" className=\"custom-file-upload\">\n          <FilePlus size={18} /> Choose Files or Folders\n        </label>\n        <input \n          type=\"file\" \n          id=\"file-upload-input\" \n          multiple \n          webkitdirectory=\"true\"\n          directory=\"true\"\n          style={{ display: 'none' }} \n          onChange={handleFileChange}\n          onClick={(event)=> { event.target.value = null }}\n        />\n      </div>\n      {selectedFilesDisplay.length > 0 && (\n        <div className=\"file-list-preview\">\n          <h4>Selected Files/Folders:</h4>\n          <ul>\n            {selectedFilesDisplay.map((file, index) => (\n              <li key={index}>\n                {file.name} ({(file.size / 1024).toFixed(2)} KB)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}