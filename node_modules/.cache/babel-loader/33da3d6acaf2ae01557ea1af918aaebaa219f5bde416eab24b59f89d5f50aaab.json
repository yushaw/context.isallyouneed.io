{"ast":null,"code":"import React,{useState,useCallback}from'react';import'./CodeInputBox.css';import{FileCode2,UploadCloud,FilePlus}from'lucide-react';import JSZip from'jszip';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CodeInputBox=_ref=>{let{onFilesProcessed,key:resetKey}=_ref;const[selectedFilesDisplay,setSelectedFilesDisplay]=useState([]);const[isDragOver,setIsDragOver]=useState(false);// Effect to clear files when resetKey changes (i.e., context is cleared in App)\nReact.useEffect(()=>{setSelectedFilesDisplay([]);},[resetKey]);const readFileAsText=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=e=>resolve({name:file.name,content:e.target.result,size:file.size,type:file.type});reader.onerror=e=>{console.error(\"Error reading file:\",file.name,e);resolve({name:file.name,content:\"Error reading file: \".concat(file.name),size:file.size,type:file.type});};reader.readAsText(file);});};const isTextFile=(fileName,fileType)=>{var _fileName$split$pop;const textExtensions=['txt','md','json','js','jsx','ts','tsx','css','html','xml','py','java','c','cpp','h','cs','go','rb','php','sh','yaml','yml','ini','cfg','log','sql','r','swift','kt','kts','gradle','conf','bat','ps1','pl','feature','rst','tex','bib','diff','patch','csv','tsv','env','lock','toml','sum'];const extension=(_fileName$split$pop=fileName.split('.').pop())===null||_fileName$split$pop===void 0?void 0:_fileName$split$pop.toLowerCase();return fileType&&fileType.startsWith('text/')||extension&&textExtensions.includes(extension);};const processAndDisplayFiles=useCallback(async fileList=>{if(fileList.length===0)return;let newDisplayFiles=[];let filesToProcessPromises=[];for(const file of fileList){newDisplayFiles.push({name:file.name,size:file.size,type:file.type});if(file.name.endsWith('.zip')){const zip=new JSZip();try{const content=await zip.loadAsync(file);const zipFilePromises=[];content.forEach((relativePath,zipEntry)=>{if(!zipEntry.dir&&isTextFile(zipEntry.name,null/* zip entries don't have a direct type */)){zipFilePromises.push(zipEntry.async('string').then(textContent=>({name:zipEntry.name,content:textContent,size:textContent.length,// Approximate size, actual uncompressed size is harder to get reliably here\ntype:'text/plain'// Assume text for now\n})).catch(err=>{console.error(\"Error reading file from zip:\",zipEntry.name,err);return{name:zipEntry.name,content:\"Error reading file from zip: \".concat(zipEntry.name),size:0,type:'error'};}));}});// filesToProcessPromises = [...filesToProcessPromises, ...zipFilePromises]; // This was wrong, it needs to await all these promises\nconst processedZipFiles=await Promise.all(zipFilePromises);filesToProcessPromises.push(...processedZipFiles.map(f=>Promise.resolve(f)));// re-wrap as promises if needed or just add\n}catch(error){console.error(\"Error processing ZIP file:\",file.name,error);filesToProcessPromises.push(Promise.resolve({name:file.name,content:\"Error processing ZIP: \".concat(error.message),size:file.size,type:file.type}));}}else if(isTextFile(file.name,file.type)){filesToProcessPromises.push(readFileAsText(file));}else{console.log(\"File \".concat(file.name,\" is not a recognized text type or ZIP. Adding as reference.\"));filesToProcessPromises.push(Promise.resolve({name:file.name,content:\"[Skipped non-text/non-zip file: \".concat(file.name,\"]\"),size:file.size,type:file.type}));}}Promise.all(filesToProcessPromises).then(filesWithContent=>{// Filter out any null/undefined results if errors weren't handled to return objects\nonFilesProcessed(filesWithContent.filter(f=>f));});setSelectedFilesDisplay(prevFiles=>[...prevFiles,...newDisplayFiles]);},[onFilesProcessed]);const handleFileChange=event=>{processAndDisplayFiles(event.target.files);};const handleDrop=useCallback(event=>{event.preventDefault();event.stopPropagation();setIsDragOver(false);processAndDisplayFiles(event.dataTransfer.files);},[processAndDisplayFiles]);const handleDragOver=useCallback(event=>{event.preventDefault();event.stopPropagation();setIsDragOver(true);},[]);const handleDragLeave=useCallback(event=>{event.preventDefault();event.stopPropagation();setIsDragOver(false);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"bento-box code-input-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"box-header\",children:[/*#__PURE__*/_jsx(FileCode2,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Code Processor\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"box-description\",children:\"Upload code files, folders, or a ZIP archive. Text-based files within folders/ZIPs will be extracted.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-drop-area \".concat(isDragOver?'dragover':''),onDrop:handleDrop,onDragOver:handleDragOver,onDragLeave:handleDragLeave,children:[/*#__PURE__*/_jsx(UploadCloud,{size:48,className:\"upload-icon\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Drag & drop files here\"}),/*#__PURE__*/_jsx(\"p\",{className:\"or-text\",children:\"or\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"file-upload-input\",className:\"custom-file-upload\",children:[/*#__PURE__*/_jsx(FilePlus,{size:18}),\" Choose Files or Folders\"]}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file-upload-input\",multiple:true,webkitdirectory:\"true\",directory:\"true\",style:{display:'none'},onChange:handleFileChange,onClick:event=>{event.target.value=null;}})]}),selectedFilesDisplay.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"file-list-preview\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Selected Files/Folders:\"}),/*#__PURE__*/_jsx(\"ul\",{children:selectedFilesDisplay.map((file,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[file.name,\" (\",(file.size/1024).toFixed(2),\" KB)\"]},index))})]})]});};export default CodeInputBox;","map":{"version":3,"names":["React","useState","useCallback","FileCode2","UploadCloud","FilePlus","JSZip","jsx","_jsx","jsxs","_jsxs","CodeInputBox","_ref","onFilesProcessed","key","resetKey","selectedFilesDisplay","setSelectedFilesDisplay","isDragOver","setIsDragOver","useEffect","readFileAsText","file","Promise","resolve","reject","reader","FileReader","onload","e","name","content","target","result","size","type","onerror","console","error","concat","readAsText","isTextFile","fileName","fileType","_fileName$split$pop","textExtensions","extension","split","pop","toLowerCase","startsWith","includes","processAndDisplayFiles","fileList","length","newDisplayFiles","filesToProcessPromises","push","endsWith","zip","loadAsync","zipFilePromises","forEach","relativePath","zipEntry","dir","async","then","textContent","catch","err","processedZipFiles","all","map","f","message","log","filesWithContent","filter","prevFiles","handleFileChange","event","files","handleDrop","preventDefault","stopPropagation","dataTransfer","handleDragOver","handleDragLeave","className","children","onDrop","onDragOver","onDragLeave","htmlFor","id","multiple","webkitdirectory","directory","style","display","onChange","onClick","value","index","toFixed"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/CodeInputBox.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './CodeInputBox.css';\nimport { FileCode2, UploadCloud, FilePlus } from 'lucide-react';\nimport JSZip from 'jszip';\n\nconst CodeInputBox = ({ onFilesProcessed, key: resetKey }) => {\n  const [selectedFilesDisplay, setSelectedFilesDisplay] = useState([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  // Effect to clear files when resetKey changes (i.e., context is cleared in App)\n  React.useEffect(() => {\n    setSelectedFilesDisplay([]);\n  }, [resetKey]);\n\n  const readFileAsText = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve({ name: file.name, content: e.target.result, size: file.size, type: file.type });\n      reader.onerror = (e) => {\n        console.error(\"Error reading file:\", file.name, e);\n        resolve({ name: file.name, content: `Error reading file: ${file.name}`, size: file.size, type: file.type });\n      };\n      reader.readAsText(file);\n    });\n  };\n\n  const isTextFile = (fileName, fileType) => {\n    const textExtensions = ['txt', 'md', 'json', 'js', 'jsx', 'ts', 'tsx', 'css', 'html', 'xml', 'py', 'java', 'c', 'cpp', 'h', 'cs', 'go', 'rb', 'php', 'sh', 'yaml', 'yml', 'ini', 'cfg', 'log', 'sql', 'r', 'swift', 'kt', 'kts', 'gradle', 'conf', 'bat', 'ps1', 'pl', 'feature', 'rst', 'tex', 'bib', 'diff', 'patch', 'csv', 'tsv', 'env', 'lock', 'toml', 'sum'];\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return (fileType && fileType.startsWith('text/')) || (extension && textExtensions.includes(extension));\n  };\n\n  const processAndDisplayFiles = useCallback(async (fileList) => {\n    if (fileList.length === 0) return;\n\n    let newDisplayFiles = [];\n    let filesToProcessPromises = [];\n\n    for (const file of fileList) {\n      newDisplayFiles.push({ name: file.name, size: file.size, type: file.type });\n\n      if (file.name.endsWith('.zip')) {\n        const zip = new JSZip();\n        try {\n          const content = await zip.loadAsync(file);\n          const zipFilePromises = [];\n          content.forEach((relativePath, zipEntry) => {\n            if (!zipEntry.dir && isTextFile(zipEntry.name, null /* zip entries don't have a direct type */)) {\n              zipFilePromises.push(\n                zipEntry.async('string').then(textContent => ({\n                  name: zipEntry.name,\n                  content: textContent,\n                  size: textContent.length, // Approximate size, actual uncompressed size is harder to get reliably here\n                  type: 'text/plain' // Assume text for now\n                }))\n                .catch(err => {\n                    console.error(\"Error reading file from zip:\", zipEntry.name, err);\n                    return { name: zipEntry.name, content: `Error reading file from zip: ${zipEntry.name}`, size: 0, type: 'error' };\n                })\n              );\n            }\n          });\n          // filesToProcessPromises = [...filesToProcessPromises, ...zipFilePromises]; // This was wrong, it needs to await all these promises\n          const processedZipFiles = await Promise.all(zipFilePromises);\n          filesToProcessPromises.push(...processedZipFiles.map(f => Promise.resolve(f))); // re-wrap as promises if needed or just add\n\n        } catch (error) {\n          console.error(\"Error processing ZIP file:\", file.name, error);\n          filesToProcessPromises.push(Promise.resolve({ name: file.name, content: `Error processing ZIP: ${error.message}`, size: file.size, type: file.type }));\n        }\n      } else if (isTextFile(file.name, file.type)) {\n        filesToProcessPromises.push(readFileAsText(file));\n      } else {\n        console.log(`File ${file.name} is not a recognized text type or ZIP. Adding as reference.`);\n        filesToProcessPromises.push(Promise.resolve({ name: file.name, content: `[Skipped non-text/non-zip file: ${file.name}]`, size: file.size, type: file.type }));\n      }\n    }\n    \n    Promise.all(filesToProcessPromises).then(filesWithContent => {\n        // Filter out any null/undefined results if errors weren't handled to return objects\n        onFilesProcessed(filesWithContent.filter(f => f)); \n    });\n\n    setSelectedFilesDisplay(prevFiles => [...prevFiles, ...newDisplayFiles]);\n\n  }, [onFilesProcessed]);\n\n  const handleFileChange = (event) => {\n    processAndDisplayFiles(event.target.files);\n  };\n\n  const handleDrop = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n    processAndDisplayFiles(event.dataTransfer.files);\n  }, [processAndDisplayFiles]);\n\n  const handleDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  return (\n    <div className=\"bento-box code-input-box\">\n      <div className=\"box-header\">\n        <FileCode2 />\n        <h2>Code Processor</h2>\n      </div>\n      <p className=\"box-description\">Upload code files, folders, or a ZIP archive. Text-based files within folders/ZIPs will be extracted.</p>\n      <div \n        className={`file-drop-area ${isDragOver ? 'dragover' : ''}`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <UploadCloud size={48} className=\"upload-icon\" />\n        <p>Drag & drop files here</p>\n        <p className=\"or-text\">or</p>\n        <label htmlFor=\"file-upload-input\" className=\"custom-file-upload\">\n          <FilePlus size={18} /> Choose Files or Folders\n        </label>\n        <input \n          type=\"file\" \n          id=\"file-upload-input\" \n          multiple \n          webkitdirectory=\"true\"\n          directory=\"true\"\n          style={{ display: 'none' }} \n          onChange={handleFileChange}\n          onClick={(event)=> { event.target.value = null }}\n        />\n      </div>\n      {selectedFilesDisplay.length > 0 && (\n        <div className=\"file-list-preview\">\n          <h4>Selected Files/Folders:</h4>\n          <ul>\n            {selectedFilesDisplay.map((file, index) => (\n              <li key={index}>\n                {file.name} ({(file.size / 1024).toFixed(2)} KB)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}