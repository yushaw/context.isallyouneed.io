{"ast":null,"code":"var _jsxFileName = \"/Users/yushaw/dev/context.isallyouneed.io/src/components/UrlInputBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './UrlInputBox.css';\nimport { Globe, ArrowRightCircle, Loader2 } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrlInputBox = ({\n  onUrlFetched\n}) => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFetchUrl = async () => {\n    if (url) {\n      setIsLoading(true);\n      let fetchedContent = '';\n      try {\n        // Basic fetch, will likely encounter CORS issues for many sites.\n        // A more robust solution would use a server-side proxy or dedicated scraping service.\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        // For simplicity, trying to get text. Real scraping might need to parse HTML.\n        const rawContent = await response.text();\n        // Basic attempt to clean up HTML for context - very rudimentary\n        // In a real app, use a proper HTML parser (e.g., DOMParser in browser, or a library)\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = rawContent;\n        fetchedContent = tempDiv.textContent || tempDiv.innerText || \"\";\n        // Limit content length if necessary\n        if (fetchedContent.length > 5000) {\n          // Example limit\n          fetchedContent = fetchedContent.substring(0, 5000) + \"... [content truncated]\";\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch URL:\", error);\n        fetchedContent = `Error fetching content from ${url}: ${error.message}`;\n      }\n      onUrlFetched(fetchedContent, url);\n      setIsLoading(false);\n      // setUrl(''); // Optionally clear URL input after fetch\n    } else {\n      alert(\"Please enter a URL.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bento-box url-input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-header\",\n      children: [/*#__PURE__*/_jsxDEV(Globe, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Website Scraper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"box-description\",\n      children: \"Enter a URL to fetch its content.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"url-input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"url\",\n        value: url,\n        onChange: e => setUrl(e.target.value),\n        placeholder: \"https://example.com\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFetchUrl,\n        disabled: isLoading || !url,\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"icon-loading-animate\",\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(ArrowRightCircle, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 81\n        }, this), isLoading ? 'Fetching...' : 'Fetch']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-indicator-inline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(UrlInputBox, \"WhfbIzLw17Bzl2Z3eEA/D4r1wFs=\");\n_c = UrlInputBox;\nexport default UrlInputBox;\nvar _c;\n$RefreshReg$(_c, \"UrlInputBox\");","map":{"version":3,"names":["React","useState","useEffect","Globe","ArrowRightCircle","Loader2","jsxDEV","_jsxDEV","UrlInputBox","onUrlFetched","_s","url","setUrl","isLoading","setIsLoading","handleFetchUrl","fetchedContent","response","fetch","ok","Error","status","rawContent","text","tempDiv","document","createElement","innerHTML","textContent","innerText","length","substring","error","console","message","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","size","_c","$RefreshReg$"],"sources":["/Users/yushaw/dev/context.isallyouneed.io/src/components/UrlInputBox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './UrlInputBox.css';\nimport { Globe, ArrowRightCircle, Loader2 } from 'lucide-react';\n\nconst UrlInputBox = ({ onUrlFetched }) => {\n  const [url, setUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFetchUrl = async () => {\n    if (url) {\n      setIsLoading(true);\n      let fetchedContent = '';\n      try {\n        // Basic fetch, will likely encounter CORS issues for many sites.\n        // A more robust solution would use a server-side proxy or dedicated scraping service.\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        // For simplicity, trying to get text. Real scraping might need to parse HTML.\n        const rawContent = await response.text(); \n        // Basic attempt to clean up HTML for context - very rudimentary\n        // In a real app, use a proper HTML parser (e.g., DOMParser in browser, or a library)\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = rawContent;\n        fetchedContent = tempDiv.textContent || tempDiv.innerText || \"\";\n        // Limit content length if necessary\n        if (fetchedContent.length > 5000) { // Example limit\n            fetchedContent = fetchedContent.substring(0, 5000) + \"... [content truncated]\";\n        }\n\n      } catch (error) {\n        console.error(\"Failed to fetch URL:\", error);\n        fetchedContent = `Error fetching content from ${url}: ${error.message}`;\n      }\n      onUrlFetched(fetchedContent, url); \n      setIsLoading(false);\n      // setUrl(''); // Optionally clear URL input after fetch\n    } else {\n      alert(\"Please enter a URL.\");\n    }\n  };\n\n  return (\n    <div className=\"bento-box url-input-box\">\n      <div className=\"box-header\">\n        <Globe />\n        <h2>Website Scraper</h2>\n      </div>\n      <p className=\"box-description\">Enter a URL to fetch its content.</p>\n      <div className=\"url-input-group\">\n        <input \n          type=\"url\" \n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"https://example.com\"\n          disabled={isLoading}\n        />\n        <button onClick={handleFetchUrl} disabled={isLoading || !url}>\n          {isLoading ? <Loader2 className=\"icon-loading-animate\" size={18} /> : <ArrowRightCircle size={18} />}\n          {isLoading ? 'Fetching...' : 'Fetch'}\n        </button>\n      </div>\n      {isLoading && (\n        <div className=\"loading-indicator-inline\">\n          {/* <div className=\"spinner\"></div> Using Loader2 icon in button instead */}\n          {/* <p>Fetching content...</p> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UrlInputBox; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}